# 10. 4bit mul
function not(a)
  return a nand a
end

function and(a, b)
  return not(a nand b)
end

function or(a, b)
  return not(a) nand not(b)
end

function halfadd(a, b)
  c = and(a, b)
  s = and(or(a, b), not(c))
  return [c, s]
end

function fulladd(a, b, x)
  cs1 = halfadd(a, b)
  cs2 = halfadd(cs1[1], x)
  c = or(cs1[0], cs2[0])
  s = cs2[1]
  return [c, s]
end

function add(a, b)
  cs0 = fulladd(a[3], b[3], 0)
  cs1 = fulladd(a[2], b[2], cs0[0])
  cs2 = fulladd(a[1], b[1], cs1[0])
  cs3 = fulladd(a[0], b[0], cs2[0])
  s = [cs3[1], cs2[1], cs1[1], cs0[1]]
  return s
end

function complement(a)
  s = [not(a[0]), not(a[1]), not(a[2]), not(a[3])]
  return add(s, [0, 0, 0, 1])
end

function sub(a, b)
  return add(a, complement(b))
end

function iszero(a)
  if a[0]
    return 0
  elseif a[1]
    return 0
  elseif a[2]
    return 0
  elseif a[3]
    return 0
  endif
  return 1
end

function mul2(a)
  return [a[1], a[2], a[3], 0]
end


function mul(a, b)
  c = [0, 0, 0, 0]
  i = [0, 0, 1, 1]
  loop
    if b[i]
      c = add(c, a)
    endif
    if iszero(i)
      break
    endif
    i = sub(i, [0, 0, 0, 1])
    a = mul2(a)
  next
  return c
end

a = [0, 1, 0, 1] # 5
b = [0, 0, 1, 1] # 3
print mul(a, b)
